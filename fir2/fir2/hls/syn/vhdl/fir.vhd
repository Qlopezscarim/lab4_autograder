-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TVALID : IN STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_r_TREADY : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_fir,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-ffvg1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.627000,HLS_SYN_LAT=113,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=402,HLS_SYN_LUT=235,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFCCCC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111100110011001100";
    constant ap_const_lv32_2666 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011001100110";
    constant ap_const_lv31_7FFFE666 : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111110011001100110";
    constant ap_const_lv29_666 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000011001100110";
    constant ap_const_lv32_FFFFD999 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101100110011001";
    constant ap_const_lv31_1999 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001100110011001";
    constant ap_const_lv30_CCC : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000110011001100";
    constant ap_const_lv30_3FFFF333 : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111001100110011";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal regslice_both_out_r_U_apdone_blk : STD_LOGIC;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln12_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal reg_10_reg_624 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_17_fu_198_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_17_reg_630 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_17_reg_630_pp0_iter1_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_11_reg_644 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_12_reg_655 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_13_reg_671 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_14_reg_687 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_15_reg_703 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_15_reg_703_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_81_load_reg_729 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_81_fu_86 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal n10_fu_90 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal n_fu_206_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_n10_load : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_fu_94 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_1_fu_98 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_2_fu_102 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_3_fu_106 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_4_fu_110 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_5_fu_114 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_6_fu_118 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal ap_sig_allocacmp_reg_10 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_7_fu_122 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal ap_sig_allocacmp_reg_9 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln22_fu_202_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_fu_246_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_473_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_267_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_fu_276_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_482_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_fu_298_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_491_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_fu_325_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_500_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_fu_349_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_509_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_fu_375_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln22_15_fu_392_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_518_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_fu_405_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_527_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_fu_425_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_536_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_fu_442_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_545_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_fu_459_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_473_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_482_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_491_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_491_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_500_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_509_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_509_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_518_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_518_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_527_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_527_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_536_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_536_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_545_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_545_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_473_ce : STD_LOGIC;
    signal grp_fu_482_ce : STD_LOGIC;
    signal grp_fu_491_ce : STD_LOGIC;
    signal grp_fu_500_ce : STD_LOGIC;
    signal grp_fu_509_ce : STD_LOGIC;
    signal grp_fu_518_ce : STD_LOGIC;
    signal grp_fu_527_ce : STD_LOGIC;
    signal grp_fu_536_ce : STD_LOGIC;
    signal grp_fu_545_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal regslice_both_in_r_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal in_r_TVALID_int_regslice : STD_LOGIC;
    signal in_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_r_U_ack_in : STD_LOGIC;
    signal out_r_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_r_U_vld_out : STD_LOGIC;
    signal ap_condition_302 : BOOLEAN;
    signal ap_condition_301 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fir_mac_muladd_17s_15s_31s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_mac_muladd_17s_14ns_32s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fir_mac_muladd_17s_14s_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fir_mac_muladd_17s_11ns_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fir_mac_muladd_17s_14ns_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fir_mac_muladd_17s_15s_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fir_mac_muladd_17s_13ns_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fir_mac_muladd_17s_12ns_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fir_mac_muladd_17s_13s_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fir_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fir_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;


    component fir_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component fir_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    mac_muladd_17s_15s_31s_32_4_1_U1 : component fir_mac_muladd_17s_15s_31s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        din2_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sext_ln22_fu_202_p0,
        din1 => grp_fu_473_p1,
        din2 => shl_ln_fu_246_p3,
        ce => grp_fu_473_ce,
        dout => grp_fu_473_p3);

    mac_muladd_17s_14ns_32s_33_4_1_U2 : component fir_mac_muladd_17s_14ns_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_10_reg_624,
        din1 => grp_fu_482_p1,
        din2 => tmp_1_fu_276_p3,
        ce => grp_fu_482_ce,
        dout => grp_fu_482_p3);

    mac_muladd_17s_14s_33s_33_4_1_U3 : component fir_mac_muladd_17s_14s_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_11_reg_644,
        din1 => grp_fu_491_p1,
        din2 => grp_fu_491_p2,
        ce => grp_fu_491_ce,
        dout => grp_fu_491_p3);

    mac_muladd_17s_11ns_33s_33_4_1_U4 : component fir_mac_muladd_17s_11ns_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 11,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_12_reg_655,
        din1 => grp_fu_500_p1,
        din2 => grp_fu_500_p2,
        ce => grp_fu_500_ce,
        dout => grp_fu_500_p3);

    mac_muladd_17s_14ns_33s_33_4_1_U5 : component fir_mac_muladd_17s_14ns_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_13_reg_671,
        din1 => grp_fu_509_p1,
        din2 => grp_fu_509_p2,
        ce => grp_fu_509_ce,
        dout => grp_fu_509_p3);

    mac_muladd_17s_15s_33s_33_4_1_U6 : component fir_mac_muladd_17s_15s_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_14_reg_687,
        din1 => grp_fu_518_p1,
        din2 => grp_fu_518_p2,
        ce => grp_fu_518_ce,
        dout => grp_fu_518_p3);

    mac_muladd_17s_13ns_33s_33_4_1_U7 : component fir_mac_muladd_17s_13ns_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_15_reg_703,
        din1 => grp_fu_527_p1,
        din2 => grp_fu_527_p2,
        ce => grp_fu_527_ce,
        dout => grp_fu_527_p3);

    mac_muladd_17s_12ns_33s_33_4_1_U8 : component fir_mac_muladd_17s_12ns_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sext_ln22_15_fu_392_p0,
        din1 => grp_fu_536_p1,
        din2 => grp_fu_536_p2,
        ce => grp_fu_536_ce,
        dout => grp_fu_536_p3);

    mac_muladd_17s_13s_33s_33_4_1_U9 : component fir_mac_muladd_17s_13s_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_81_load_reg_729,
        din1 => grp_fu_545_p1,
        din2 => grp_fu_545_p2,
        ce => grp_fu_545_ce,
        dout => grp_fu_545_p3);

    flow_control_loop_delay_pipe_U : component fir_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);

    regslice_both_in_r_U : component fir_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_r_U_ack_in,
        data_out => in_r_TDATA_int_regslice,
        vld_out => in_r_TVALID_int_regslice,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_r_U_apdone_blk);

    regslice_both_out_r_U : component fir_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_r_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    n10_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_302)) then
                n10_fu_90 <= n_fu_206_p2;
            end if;
        end if;
    end process;

    reg_1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_301)) then 
                    reg_1_fu_98 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    reg_1_fu_98 <= reg_14_reg_687;
                end if;
            end if; 
        end if;
    end process;

    reg_2_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_301)) then 
                    reg_2_fu_102 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    reg_2_fu_102 <= reg_13_reg_671;
                end if;
            end if; 
        end if;
    end process;

    reg_3_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_301)) then 
                    reg_3_fu_106 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    reg_3_fu_106 <= reg_12_reg_655;
                end if;
            end if; 
        end if;
    end process;

    reg_4_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_301)) then 
                    reg_4_fu_110 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    reg_4_fu_110 <= reg_11_reg_644;
                end if;
            end if; 
        end if;
    end process;

    reg_5_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                    reg_5_fu_114 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    reg_5_fu_114 <= reg_10_reg_624;
                end if;
            end if; 
        end if;
    end process;

    reg_6_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_302)) then
                reg_6_fu_118 <= ap_sig_allocacmp_reg_9;
            end if;
        end if;
    end process;

    reg_7_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_302)) then
                reg_7_fu_122 <= reg_17_fu_198_p1;
            end if;
        end if;
    end process;

    reg_81_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_301)) then 
                    reg_81_fu_86 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    reg_81_fu_86 <= reg_fu_94;
                end if;
            end if; 
        end if;
    end process;

    reg_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_301)) then 
                    reg_fu_94 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    reg_fu_94 <= reg_15_reg_703_pp0_iter6_reg;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                reg_10_reg_624 <= ap_sig_allocacmp_reg_10;
                reg_11_reg_644 <= reg_5_fu_114;
                reg_17_reg_630 <= reg_17_fu_198_p1;
                reg_17_reg_630_pp0_iter1_reg <= reg_17_reg_630;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                reg_12_reg_655 <= reg_4_fu_110;
                reg_13_reg_671 <= reg_3_fu_106;
                reg_14_reg_687 <= reg_2_fu_102;
                reg_15_reg_703 <= reg_1_fu_98;
                reg_15_reg_703_pp0_iter6_reg <= reg_15_reg_703;
                reg_81_load_reg_729 <= reg_81_fu_86;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state12_pp0_stage0_iter11, regslice_both_out_r_U_apdone_blk, ap_block_state13_pp0_stage0_iter12, ap_loop_exit_ready_pp0_iter12_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (regslice_both_out_r_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_pp0_stage0_iter12)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_pp0_stage0_iter11)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state12_pp0_stage0_iter11, regslice_both_out_r_U_apdone_blk, ap_block_state13_pp0_stage0_iter12, ap_loop_exit_ready_pp0_iter12_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (regslice_both_out_r_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_pp0_stage0_iter12)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_pp0_stage0_iter11)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_grp0_assign_proc : process(ap_done_reg, regslice_both_out_r_U_apdone_blk, ap_loop_exit_ready_pp0_iter12_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001_grp0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (regslice_both_out_r_U_apdone_blk = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state12_pp0_stage0_iter11, regslice_both_out_r_U_apdone_blk, ap_block_state13_pp0_stage0_iter12, ap_loop_exit_ready_pp0_iter12_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (regslice_both_out_r_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_pp0_stage0_iter12)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_pp0_stage0_iter11)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_grp0_assign_proc : process(ap_done_reg, regslice_both_out_r_U_apdone_blk, ap_loop_exit_ready_pp0_iter12_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone_grp0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (regslice_both_out_r_U_apdone_blk = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state12_pp0_stage0_iter11_assign_proc : process(out_r_TREADY_int_regslice)
    begin
                ap_block_state12_pp0_stage0_iter11 <= (out_r_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state13_pp0_stage0_iter12_assign_proc : process(regslice_both_out_r_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_state13_pp0_stage0_iter12 <= ((regslice_both_out_r_U_apdone_blk = ap_const_logic_1) or (out_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg, in_r_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (in_r_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_301_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_start_int)
    begin
                ap_condition_301 <= ((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_302_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_302 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln12_fu_212_p2, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln12_fu_212_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n10_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, n10_fu_90, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n10_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_n10_load <= n10_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_reg_10_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, reg_6_fu_118, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_reg_10 <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_reg_10 <= reg_6_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_reg_9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, reg_7_fu_122, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_reg_9 <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_reg_9 <= reg_7_fu_122;
        end if; 
    end process;


    grp_fu_473_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_473_ce <= ap_const_logic_1;
        else 
            grp_fu_473_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_473_p1 <= ap_const_lv32_FFFFCCCC(15 - 1 downto 0);

    grp_fu_482_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_482_ce <= ap_const_logic_1;
        else 
            grp_fu_482_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_482_p1 <= ap_const_lv32_2666(14 - 1 downto 0);

    grp_fu_491_ce_assign_proc : process(ap_block_pp0_stage0_11001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            grp_fu_491_ce <= ap_const_logic_1;
        else 
            grp_fu_491_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_491_p1 <= ap_const_lv31_7FFFE666(14 - 1 downto 0);
    grp_fu_491_p2 <= (tmp_2_fu_298_p4 & ap_const_lv14_0);

    grp_fu_500_ce_assign_proc : process(ap_block_pp0_stage0_11001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            grp_fu_500_ce <= ap_const_logic_1;
        else 
            grp_fu_500_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_500_p1 <= ap_const_lv29_666(11 - 1 downto 0);
    grp_fu_500_p2 <= (tmp_3_fu_325_p4 & ap_const_lv14_0);

    grp_fu_509_ce_assign_proc : process(ap_block_pp0_stage0_11001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            grp_fu_509_ce <= ap_const_logic_1;
        else 
            grp_fu_509_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_509_p1 <= ap_const_lv32_2666(14 - 1 downto 0);
    grp_fu_509_p2 <= (tmp_4_fu_349_p4 & ap_const_lv14_0);

    grp_fu_518_ce_assign_proc : process(ap_block_pp0_stage0_11001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            grp_fu_518_ce <= ap_const_logic_1;
        else 
            grp_fu_518_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_518_p1 <= ap_const_lv32_FFFFD999(15 - 1 downto 0);
    grp_fu_518_p2 <= (tmp_5_fu_375_p4 & ap_const_lv14_0);

    grp_fu_527_ce_assign_proc : process(ap_block_pp0_stage0_11001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            grp_fu_527_ce <= ap_const_logic_1;
        else 
            grp_fu_527_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_527_p1 <= ap_const_lv31_1999(13 - 1 downto 0);
    grp_fu_527_p2 <= (tmp_6_fu_405_p4 & ap_const_lv14_0);

    grp_fu_536_ce_assign_proc : process(ap_block_pp0_stage0_11001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            grp_fu_536_ce <= ap_const_logic_1;
        else 
            grp_fu_536_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_536_p1 <= ap_const_lv30_CCC(12 - 1 downto 0);
    grp_fu_536_p2 <= (tmp_7_fu_425_p4 & ap_const_lv14_0);

    grp_fu_545_ce_assign_proc : process(ap_block_pp0_stage0_11001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            grp_fu_545_ce <= ap_const_logic_1;
        else 
            grp_fu_545_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_545_p1 <= ap_const_lv30_3FFFF333(13 - 1 downto 0);
    grp_fu_545_p2 <= (tmp_8_fu_442_p4 & ap_const_lv14_0);
    icmp_ln12_fu_212_p2 <= "1" when (ap_sig_allocacmp_n10_load = ap_const_lv7_63) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0, ap_start_int, in_r_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int_regslice;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= regslice_both_in_r_U_ack_in;

    in_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    n_fu_206_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n10_load) + unsigned(ap_const_lv7_1));

    out_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, out_r_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_459_p4),24));
    out_r_TVALID <= regslice_both_out_r_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    reg_17_fu_198_p1 <= in_r_TDATA_int_regslice(17 - 1 downto 0);
    sext_ln22_15_fu_392_p0 <= reg_fu_94;
    sext_ln22_fu_202_p0 <= ap_sig_allocacmp_reg_9;
    shl_ln_fu_246_p3 <= (reg_17_reg_630_pp0_iter1_reg & ap_const_lv14_0);
    tmp_1_fu_276_p3 <= (trunc_ln_fu_267_p4 & ap_const_lv14_0);
    tmp_2_fu_298_p4 <= grp_fu_482_p3(32 downto 14);
    tmp_3_fu_325_p4 <= grp_fu_491_p3(32 downto 14);
    tmp_4_fu_349_p4 <= grp_fu_500_p3(32 downto 14);
    tmp_5_fu_375_p4 <= grp_fu_509_p3(32 downto 14);
    tmp_6_fu_405_p4 <= grp_fu_518_p3(32 downto 14);
    tmp_7_fu_425_p4 <= grp_fu_527_p3(32 downto 14);
    tmp_8_fu_442_p4 <= grp_fu_536_p3(32 downto 14);
    tmp_9_fu_459_p4 <= grp_fu_545_p3(32 downto 14);
    trunc_ln_fu_267_p4 <= grp_fu_473_p3(31 downto 14);
end behav;
